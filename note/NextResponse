طلب المستخدم:
 عندما يقوم المستخدم بإجراء طلب (مثل الضغط على زر أو فتح صفحة)، يرسل المتصفح طلب HTTP إلى الخادم.

تنسيق البيانات:
 غالبًا ما يكون تنسيق البيانات المستخدم بين العميل والخادم هو JSON (JavaScript Object Notation). JSON هو تنسيق خفيف وسهل القراءة والتعامل معه.

NextResponse:
عند استخدام NextResponse في Next.js، فإنها تسهل عملية إنشاء الاستجابات. إذا كانت الاستجابة تتضمن بيانات JSON، يمكن استخدام NextResponse.json(data)، وهذا يقوم تلقائيًا بإعداد الاستجابة مع الرأس المناسب (Content-Type: application/json) وتحويل الكائن JavaScript إلى JSON.

تحويل البيانات:
 لذا، عندما تعيد الاستجابة من الخادم، يقوم المتصفح بتفسير هذه الاستجابة (التي هي في شكل JSON) وتحويلها إلى كائنات JavaScript يمكن استخدامها في واجهة المستخدم.

 -------------------------------------
 في Next.js، تعتمد على كائن request فقط لإدارة الطلبات، بينما تستخدم NextResponse لإرسال الاستجابات، مما يجعل الكود أكثر نظافة وبساطة
 --------------------------------------
 الفرق بين استخدام params وreq.json() في هذا السياق:
1. ما هو req.json()؟
req.json(): هذه الدالة تُستخدم لقراءة جسم الطلب (request body) عندما يتم إرسال بيانات إلى الخادم عبر HTTP، مثل الطلبات من نوع POST. يتم استخدامه عندما يتم إرسال البيانات بتنسيق JSON في جسم الطلب.
2. استخدام params:
params: تُستخدم لاستخراج القيم من مسار URL. على سبيل المثال، إذا كان لديك مسار مثل /api/events/join/{eventId}، يمكنك استخدام params للوصول إلى قيمة eventId من URL.

* الخلاصة:
req.json(): يُستخدم عندما تريد استلام البيانات المرسلة في جسم الطلب.
params: يُستخدم لاستخراج البيانات من مسار URL.
-------------------------------------------